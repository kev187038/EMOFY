pipeline {
    agent any

    parameters {
        booleanParam(name: 'USE_GPU', defaultValue: false, description: 'Enable GPU support in Minikube')
    }

    stages {
        stage('Start minikube') {
            environment {
                nodes = 1
            }
            steps {
                script {
                    // Base Minikube start command
                    def minikubeCmd = "minikube start --driver=docker --nodes=${nodes}"

                    if (params.USE_GPU) {
                        // Add GPU-specific parameters if USE_GPU is true
                        minikubeCmd += " --gpus all"
                    }

                    // Start Minikube
                    bat minikubeCmd

                    if (params.USE_GPU) {
                        // Enable GPU addons if USE_GPU is true
                        bat "minikube addons enable nvidia-driver-installer"
                        bat "minikube addons enable nvidia-gpu-device-plugin"
                        bat "minikube addons enable nvidia-device-plugin"
                    }
                }
            }
        }
        stage('deploy login service') {
            steps {
                script {
                    dir('login') {
                        bat 'kubectl create -f deployment\\emofy-db-container-claim0-persistentvolumeclaim.yaml'
                        bat 'kubectl create -f deployment\\emofy-db-container-deployment.yaml'
                        bat 'kubectl create -f service\\emofy-db-container-service.yaml'
                        bat 'kubectl create -f deployment\\emofy-login-service-deployment.yaml'
                        bat 'kubectl create -f service\\emofy-login-service-service.yaml'
                    }
                }
            }
        }

        stage('deploy image storage') {
            steps {
                script {
                    dir('image_storage') {
                        bat 'kubectl create -f deployment\\minio_pvc_deployment.yaml'
                        bat 'kubectl create -f deployment\\minio_deployment.yaml'
                        bat 'kubectl create -f service\\minio_service.yaml'
                        bat 'kubectl create -f deployment\\image_storage_deployment.yaml'
                        bat 'kubectl create -f service\\image_storage_service.yaml'
                    }
                }
            }
        }

        stage('deploy image filter service')
        {
            steps {
                script {
                    dir('image_filter') {
                        bat 'kubectl create -f k8\\deployment.yaml'
                        bat 'kubectl create -f k8\\service.yaml'
                    }
                }
            }
        }

        stage('deploy elk-stack')
        {
            steps {
                script {
                    dir('ElkStack') {
                        bat 'kubectl create -f elasticsearch-deployment.yaml'
                        bat 'kubectl create -f kibana-deployment.yaml'
                        bat 'kubectl create -f logstash-deployment.yaml'
                        bat 'kubectl create -f elasticsearch-service.yaml'
                        bat 'kubectl create -f kibana-service.yaml'
                        bat 'kubectl create -f logstash-service.yaml'
                    }
                }
            }
        }
        stage('deploy emotion-classification service')
        {
            steps {
                script {
                    dir('emotion_classification\\serving') {

                        bat 'kubectl create -f k8\\deployment.yaml'
                        bat 'kubectl create -f k8\\service.yaml'
                        bat 'kubectl create -f k8\\login-credentials.yaml'
                        bat 'kubectl create -f k8\\minio-credentials.yaml'
                        bat 'kubectl create -f k8\\minio-model.yaml'
                        bat 'kubectl create -f k8\\service-reader-role.yaml'
                        bat 'kubectl create -f k8\\service-reader-rolebinding.yaml'
                    }
                }
            }
        }
                stage('deploy model retraining cron job')
        {
            steps {
                script {
                    dir('emotion_classification\\retraining') {
                        bat 'kubectl create -f k8\\retrain-cron.yaml'
                    }
                }
            }
        }
        stage('Tunnel to localhost') {
            environment {
                time_to_sleep = 30
                tries = 100
            }
            steps {
                script {
                    is_pod_running = false                   
                    for (int i = 0; i < tries.toInteger() && !is_pod_running; i++) {                     
                        is_pod_running = bat(script: "kubectl get pod -l io.kompose.service=emofy-login-service -o jsonpath='{.items[*].status.phase}'", returnStdout: true).contains("Running")
                        is_pod_running = is_pod_running && bat(script: "kubectl get pod -l app=emofy-image-storage -o jsonpath='{.items[*].status.phase}'", returnStdout: true).contains("Running")
                        is_pod_running = is_pod_running && bat(script: "kubectl get pod -l app=image-filters -o jsonpath='{.items[*].status.phase}'", returnStdout: true).contains("Running")
                        is_pod_running = is_pod_running && bat(script: "kubectl get pod -l app=emotion-detector -o jsonpath='{.items[*].status.phase}'", returnStdout: true).contains("Running")
                        is_pod_running = is_pod_running && bat(script: "kubectl get pod -l app=minio -o jsonpath='{.items[*].status.phase}'", returnStdout: true).contains("Running")
                        is_pod_running = is_pod_running && bat(script: "kubectl get pod -l app=kibana -o jsonpath='{.items[*].status.phase}'", returnStdout: true).contains("Running")

                        sleep time_to_sleep
                    }                   
                    if (is_pod_running) {
                        sleep time_to_sleep
                        withEnv(['JENKINS_NODE_COOKIE=dontkillMe']) {
                            bat 'start /b cmd /c "kubectl port-forward service/emofy-login-service 8085:8085"'
                            bat 'start /b cmd /c "kubectl port-forward service/emofy-image-storage 8081:8081"'
                            bat 'start /b cmd /c "kubectl port-forward service/image-filters-service 5000:5000"'
                            bat 'start /b cmd /c "kubectl port-forward service/emotion-detector-service 5050:5050"'
                            bat 'start /b cmd /c "kubectl port-forward service/minio-console 9001:9001"'
                            bat 'start /b cmd /c "kubectl port-forward service/kibana 5601:5601"'
		                }
                    } 
                    else {
                        error "Pod not running after ${tries} tries."
                    }
                }
            }
        }
    }
}
