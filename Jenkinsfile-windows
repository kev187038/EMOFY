pipeline {
    agent any
    stages {
        stage('Start minikube') {
            environment {
                nodes = 1
            }
            steps {
                script {
                    bat "minikube start --nodes=${nodes}"
                }
            }
        }

        stage('users db setup') {
            steps {
                script {
                    dir('login') {
                        bat 'kubectl create -f deployment\\emofy-db-container-claim0-persistentvolumeclaim.yaml'
                        bat 'kubectl create -f deployment\\emofy-db-container-deployment.yaml'
                        bat 'kubectl create -f service\\emofy-db-container-service.yaml'
                    }
                }
            }
        }

        stage('deploy login service') {
            steps {
                script {
                    dir('login') {
                        bat 'mvn clean install'
                        bat 'kubectl create -f deployment\\emofy-login-service-deployment.yaml'
                        bat 'kubectl create -f service\\emofy-login-service-service.yaml'
                    }
                }
            }
        }

        stage('Tunnel to localhost') {
            environment {
                time_to_sleep = 10
                tries = 20
            }
            steps {
                script {
                    is_pod_running = false                   
                    for (int i = 0; i < tries.toInteger() && !is_pod_running; i++) {                     
                        is_pod_running = bat(script: "kubectl get pod -l io.kompose.service=emofy-login-service -o jsonpath='{.items[*].status.phase}'", returnStdout: true).contains("Running")
                        sleep time_to_sleep
                    }                   
                    if (is_pod_running) {
                        withEnv(['JENKINS_NODE_COOKIE=dontkillMe']) {
                            bat 'start /b kubectl port-forward service/emofy-login-service 8085:8085'
		                }
                    } 
                    else {
                        error "Pod not running after ${tries} tries."
                    }
                }
            }
        }
    }
}
